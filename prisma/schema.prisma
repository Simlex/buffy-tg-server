// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
    // shadowDatabaseUrl = env("SH_DATABASE_URL")
}

model Users {
    id                         String             @id @default(uuid())
    userId                     String             @unique
    username                   String
    email                      String?            @unique
    emailVerified              Boolean            @default(false)
    role                       String             @default("user")
    level                      Int                @default(1)
    firstName                  String?
    lastName                   String?
    profilePhoto               String?
    phone                      String?
    referralCode               String             @unique
    referralCount              Int                @default(0)
    referralContestCount       Int                @default(0)
    isWalletConnected          Boolean            @default(false)
    hadMadeFirstTonTransaction Boolean            @default(false)
    connectedWallets           ConnectedWallets[]

    tapPoints              Int       @default(0)
    totalPoints            Int       @default(0)
    diceRollsPoints        Int       @default(0)
    totalDiceRolls         Int       @default(0) // total number of dice rolls the user has made
    diceSpin15Claimed      Boolean   @default(false)
    diceSpin75Claimed      Boolean   @default(false)
    joinedErax             Boolean   @default(false)
    playedKolo             Boolean   @default(false)
    subscribedToZae        Boolean   @default(false)
    triviaPoints           Int       @default(0)
    lastAnsweredTriviaDate DateTime?
    agePoints              Int       @default(0) // points earned from age verification
    messagesPoints         Int       @default(0) // points earned from messages sent
    tonEarned              Float     @default(0.0) // total ton earned
    nftEarned              Float     @default(0.0) // total nft earned
    tonSent                Float     @default(0.0) // total ton transacted (sent)

    dailyFreeBoosters                      Int       @default(4)
    boostRefillEndTime                     DateTime?
    dailyBoostersExp                       DateTime?
    dailyFreeDiceRollsStreak               Int       @default(0)
    dailyFreeDiceRollsClaimed              Boolean   @default(false)
    dailyFreeDiceRollsNextClaimableDate    DateTime?
    dailyFreeDiceRollsNextClaimableDateExp DateTime?
    availableDiceRolls                     Int       @default(0)

    isSubscribedToPremium  Boolean   @default(false)
    premiumSubscriptionExp DateTime?

    telegramTaskDone            Boolean  @default(false)
    twitterTaskDone             Boolean  @default(false)
    websiteViewTaskDone         Boolean  @default(false)
    highestReferralBonusClaimed Int      @default(0)
    createdAt                   DateTime @default(now())
    updatedAt                   DateTime @updatedAt
}

model Referrals {
    id         String   @id @default(uuid())
    userId     String
    referredId String
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@unique([userId, referredId])
}

model ConnectedWallets {
    id            String   @id @default(uuid())
    userId        String   @unique
    user          Users    @relation(fields: [userId], references: [userId])
    walletType    String
    walletAddress String
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt

    @@unique([walletType, walletAddress])
}
